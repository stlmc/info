{"version":3,"sources":["Component/LinePlot/style/variable.module.scss","Component/LinePlot/style/LinePlotStyle.scss","Component/Core/Util/Layout.tsx","Component/Core/Renderer/ModeRenderer.js","Component/Core/Renderer/MainRenderer.js","Component/Core/Renderer/PropositionRenderer.js","Component/Core/Util/DataParserRaw.tsx","Component/LinePlot/StandAloneLinePlot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","margin","top","right","bottom","left","size","width","height","PropData","range","interval_range","ModeRenderer","_size","_margin_viewer","_index","_jd","this","axis_delta","x_clip_margin","data_viewer_height","_tag","d3","selectAll","remove","maxX","data","xrange","yrange","type","min","max","dataXrange","length","sim","elem","includes","push","canvas","append","attr","modeCanvas","XscaleError","YscaleError","Xscale","domain","Yscale","scaleX","scaleY","modeCanvasIntervalLines","call","tickValues","tickSize","tickPadding","tickFormat","select","modeCanvasXaxis","modeCanvasYaxis","ticks","d","map","e","parseInt","i","parseFloat","modeGraph","enter","modeLineGenerator","x","y","curve","modeLineG","Renderer","maxY","l","xdata","pdata","vardict","modeSize","subXscale","subYscale","refData","t1","fps","t0","Date","now","text","Math","round","graphCanvas","graphCanvasFront","colorScale","dataYrange","dataCanvasXscale","dataCanvasYscale","dataCanvasXscaleZoom","dataCanvasYscaleZoom","graphCanvasXaxisGrid","graphCanvasYaxisGrid","graphCanvasXaxis","graphCanvasYaxis","zoom","extent","scaleExtent","Infinity","translateExtent","on","event","transform","rescaleX","rescaleY","propCanvasYscale","lineGenerator","lineGenerator2","lineG","lineGraph","each","newX","tooltip","style","drawGraph","color","newDataList","nameList","k","name","infoHeight","InfoCanvas","bisectDate","popup","mouse","pos","invert","bisectPos","_graph","graph","PropositionRenderer","propCanvas","propCanvasIntervalLines","propCanvasXaxis","propCanvasYaxis","propGraph","propLineGenerator","propLineG","Json","_intervalsMap","Map","_intervalVarMap","_dataByNameMap","_xRangeMap","_yRangeMap","_graph_size","minX","totalMaxX","totalMinX","_isEmpty","_var_list","_x_data_list","_interval_flat_list","_interval_info","_propMap","_modeMap","parse","json","clearAll","Object","values","variable","interval","dataByName","prop","mode","intervalInfo","full_interval_range","entries","ovalue","interval_index","interval_data","tmp","intIndex","set","counter_mode","mode_name","mode_type","mode_data","intv_data_set","ii2","numnumlist","iifg","get","yy","tmp_mode","actual","originalData","counter","prop_name","prop_actual","prop_data","tmp_prop","s","index","varList","v","points","intIndexInt","intervals","tmp_interval","IsInList","pv","getFromGraph","minY","tmp_data","res","intv","intvElem","newI","clear","StandAloneLinePlot","props","styleVariable","replace","margin_viewer_top","margin_viewer_right","margin_viewer_bottom","margin_viewer_left","renderers","propRenderers","modeRenderers","njson","base_margin","state","isCounterExm","selectedValue","isOptionAlive","graphNum","model","propState","isEnabled","numOfGraph","propMap","propData","modeState","modeMap","toggle","isToggleChanged","xlist","serverError","message","error","isShutDown","isLoadingReset","load_model","bind","parse_model","Item","ItemList","Main","gs","GetGraphSize","isRedBool","$","window","newSize","red","GetGraph","isBoolean","propSize","modeIsBoolean","GetModeSize","md","setState","TotalMinX","TotalMaxX","GetIntervalInfoFlat","isEmpty","modeRenderersXScale","modeRenderersYScale","GetMode","loadGraph","getXscale","getYscale","eGraph","GetDataByName","xRange","yRange","variables","GetProp","title","uid","prevProps","prevState","snapshot","key_index","vars","GetVar","label","marginLeft","marginRight","key","Form","Row","Check","onChange","checked","onClick","newIsEnabled","id","display","className","mod","isBool","newIs","count","res2","res3","PropUI","ModeUI","role","React","Component","App","url","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2b8aee4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"width\":\"820px\",\"height\":\"600px\",\"width_viewer\":\"420px\",\"height_viewer\":\"300px\",\"width_controller\":\"420px\",\"height_controller\":\"100px\",\"margin_viewer_top\":\"20px\",\"margin_viewer_right\":\"30px\",\"margin_viewer_bottom\":\"50px\",\"margin_viewer_left\":\"30px\",\"margin_controller_top\":\"20px\",\"margin_controller_right\":\"20px\",\"margin_controller_bottom\":\"10px\",\"margin_controller_left\":\"20px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"width\":\"820px\",\"height\":\"600px\",\"width_viewer\":\"420px\",\"height_viewer\":\"300px\",\"width_controller\":\"420px\",\"height_controller\":\"100px\",\"margin_viewer_top\":\"20px\",\"margin_viewer_right\":\"30px\",\"margin_viewer_bottom\":\"50px\",\"margin_viewer_left\":\"30px\",\"margin_controller_top\":\"20px\",\"margin_controller_right\":\"20px\",\"margin_controller_bottom\":\"10px\",\"margin_controller_left\":\"20px\"};","export class margin {\n    constructor(\n        public top: number = 0.0,\n        public right: number = 0.0,\n        public bottom: number = 0.0,\n        public left: number = 0.0,\n    ) {\n    }\n}\n\nexport class size {\n    constructor(\n        public width: number = 0.0,\n        public height: number = 0.0,\n    ) {\n    }\n}\n\nexport class PropData {\n    constructor(\n        // range of x, for example if your data start with 0 and\n        // end with 22.2 then, range will be [0, 22.2]\n        public range: number[] = [],\n        // interval_range is same as range but contains start and\n        // end points of every intervals.\n        // For example, if the interval range of each a : [0, 1], b : [1, 3]\n        // then, interval_range will be [0, 1, 3].\n        public interval_range: number[] = [],\n    ) {\n    }\n}","import * as d3 from 'd3';\nimport \"./MainRenderer.scss\";\n\nclass ModeRenderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = '',\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        // actual data point viewers height.\n        this.data_viewer_height = 60.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#mode\" + this._index;\n        this._jd = _jd;\n\n    }\n\n    clear(){\n        d3.select(this._tag).selectAll(\"#mode_svg\").remove();\n    }\n\n    loadGraph(maxX, data, xrange, yrange, type, min, max) {\n        this.dataXrange = maxX;\n        this.xrange = xrange;\n\n\n        if (yrange.length === 0){\n            return 0;\n        }\n        let sim = [];\n        for (let elem of yrange){\n            if (!sim.includes(elem)){\n                sim.push(elem);\n            }\n        }\n\n        d3.select(this._tag).selectAll(\"#mode_svg\").remove();\n\n        // set main canvas\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"mode_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        // set canvas front\n        this.modeCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#modeCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"modeCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n\n        // set data canvas\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n        this.YscaleError = (max - min) / 10;\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.Xscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n\n        if (type === \"bool\"){\n            // set scale function for y\n            // 0: none, 1: false, 2: true, 3:none\n            this.Yscale =\n                d3.scaleLinear()\n                    .domain([0, 3])\n                    .range([this.data_viewer_height, 0]);\n        } else {\n            // set scale function for y\n            this.Yscale =\n                d3.scaleLinear()\n                    .domain([min - this.YscaleError, max + this.YscaleError])\n                    .range([this.data_viewer_height, 0]);\n        }\n\n        this.min = min;\n        this.max = max;\n\n\n        let scaleX = this.Xscale;\n        let scaleY = this.Yscale;\n\n\n        // Add interval lines.\n        this.modeCanvasIntervalLines = this.modeCanvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasIntervalLines\");\n\n        // tickValues is actual data line\n        // e.g) if you put [1, 2] in the tickValues than, it will draw line to x:1 and x:2.\n        this.modeCanvasIntervalLines.call(d3.axisBottom(scaleX).tickValues(this.xrange).tickSize(this._size.height).tickPadding(3).tickFormat(() => {\n            return \"\"\n        })).select(\".domain\").remove();\n\n\n        // Add x axis for propCanvas.\n        this.modeCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(scaleX));\n\n        // Add y axis.\n        this.modeCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"modeCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\");\n\n        if(type === \"bool\"){\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).ticks(4).tickFormat(\n                (d) => {\n                    if (d === 1) {\n                        return \"false\"\n                    } else if (d === 2) {\n                        return \"true\"\n                    } else {\n                        return \" \"\n                    }\n                }));\n        }\n        else if(type === \"int\"){\n            let yRealRange = yrange.map((e) => {\n                return parseInt(e);\n            });\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).tickValues(sim).tickFormat(\n                (d, i) => {\n                    return sim[i];\n                }\n            ));\n        } else if(type === \"real\"){\n            let yRealRange = yrange.map((e) => {\n                return parseFloat(e);\n            });\n            this.modeCanvasYaxis.call(d3.axisLeft(scaleY).tickValues(sim).tickFormat(\n                (d, i) => {\n                    return sim[i];\n                }\n            ));\n        }\n\n\n        // update when redraw, remove previous proposition graph.\n        this.modeGraph = this.modeCanvas\n            .selectAll(\"#modeLines\"+this._index)\n            .append(\"g\")\n            .data(data)\n            .enter();\n\n\n        // set proposition graph line generator\n        this.modeLineGenerator = d3.line()\n            .x(function (d) {\n                return scaleX(d[0]);\n            })\n            .y(function (d) {\n                return scaleY(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        let modeLineG = this.modeLineGenerator;\n        /**\n         * this is actual data of proposition graph\n         */\n        this.modeGraph\n            .append(\"path\")\n            .attr(\"d\", (d) => {\n                return modeLineG(d);\n            })\n            .attr(\"id\", \"modeLines\"+this._index)\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5);\n\n    }\n\n    getXscale(){\n        return this.Xscale;\n    }\n\n    getYscale(){\n        return this.Yscale;\n    }\n\n\n\n}\n\nexport {ModeRenderer};","import * as d3 from 'd3';\nimport $ from \"jquery\";\nimport \"./MainRenderer.scss\";\n\nclass Renderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = ''\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#graph\" + this._index;\n        this._jd = _jd;\n        this.data_viewer_height = this._size.height - 20.0;\n    }\n\n\n    get graph() {\n        return this._graph;\n    }\n\n    set graph(graph) {\n        this._graph = graph;\n    }\n\n    clear() {\n        d3.select(this._tag).selectAll(\"#main_svg\").remove();\n    }\n\n    loadGraph(maxX, maxY, l, xdata, pdata, vardict, modeSize, subXscale, subYscale) {\n        this.refData = l;\n        d3.select(this._tag).selectAll(\"#main_svg\").remove();\n        d3.select(this._tag).selectAll(\"#main_svg_info\").remove();\n\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"main_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        let fps = d3.select(\"#graph span\");\n\n        let t0 = Date.now(), t1;\n\n        d3.timer(function () {\n\n            t1 = Date.now();\n            fps.text(Math.round(1000 / (t1 - t0)) + \" fps\");\n            t0 = t1;\n        });\n\n        // set data canvas\n        this.graphCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#graphCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"graphCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n        this.graphCanvasFront =\n            this.graphCanvas.append(\"g\");\n\n        // Color scale for line plot in dataCanvas.\n        // This will automatically add colors to your lines.\n        this.colorScale = d3.scaleOrdinal(d3.schemeCategory10);\n\n\n        // Get original data's x's and y's extent.\n        // Will slow loading since json.data.xRange() itself need lots of calculations.\n        // Need to be removed soon.\n        this.dataXrange = maxX;\n        this.dataYrange = maxY;\n\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n        let YscaleError = (this.dataYrange[1] - this.dataYrange[0]) / 10;\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.dataCanvasXscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n        // Set scale function for y.\n        // This process will do the same thing as x.\n        this.dataCanvasYscale = d3.scaleLinear()\n            .domain([this.dataYrange[0] - YscaleError, this.dataYrange[1] + YscaleError])\n            .range([this.data_viewer_height, 0]);\n\n        this.dataCanvasXscaleZoom = this.dataCanvasXscale;\n        this.dataCanvasYscaleZoom = this.dataCanvasYscale;\n\n        // Add scaling function generators for x and y.\n        let make_y_grid = () => {\n            return d3.axisBottom(this.dataCanvasXscale);\n        };\n        let make_x_grid = () => {\n            return d3.axisLeft(this.dataCanvasYscale);\n        };\n\n        // Add this Grid xis first. If not, left y axis will overlap with grid axis.\n        this.graphCanvasXaxisGrid = this.graphCanvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasXaxisGrid\" + this._index)\n            .attr(\"class\", \"XaxisGrid\");\n\n        this.graphCanvasXaxisGrid.call(make_y_grid()\n            .tickSize(this._size.height)\n            .tickPadding(10)\n            .tickFormat(() => {\n                return \"\";\n            }))\n            .select(\".domain\").remove();\n\n        this.graphCanvasYaxisGrid = this.graphCanvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasYaxisGrid\" + this._index)\n            .attr(\"class\", \"YaxisGrid\");\n\n        // -this._size.width will mirroring the position.\n        this.graphCanvasYaxisGrid.call(make_x_grid()\n            .tickSize(-this._size.width)\n            .tickPadding(10)\n            .tickFormat(() => {\n                return \"\";\n            }))\n            .select(\".domain\").remove();\n\n        // Add clipping path.\n        // If you are adding clipping path without margin, your zero of your axis will get lost.\n        // Add x and y axis to dataCanvas.\n        this.graphCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(this.dataCanvasXscale));\n\n        this.graphCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"graphCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\")\n            .call(d3.axisLeft(this.dataCanvasYscale));\n\n\n        // Add zoom function to dataCanvas\n        this.zoom = d3.zoom()\n            .extent([[0, 0], [this._size.width, this.data_viewer_height]])\n            .scaleExtent([1, Infinity])\n            .translateExtent([[0, -this.dataYrange[1]], [Infinity, Infinity]])\n            .on(\"zoom\", (event) => {\n\n                // Update scale functions to zoomed ones.\n                this.dataCanvasXscaleZoom = event.transform.rescaleX(this.dataCanvasXscale);\n                this.dataCanvasYscaleZoom = event.transform.rescaleY(this.dataCanvasYscale);\n\n                // Update axis.\n                this.graphCanvasXaxis.call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                this.graphCanvasYaxis.call(d3.axisLeft(this.dataCanvasYscaleZoom));\n\n                d3.selectAll(\"#propCanvasXaxis\").call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                d3.selectAll(\"#propCanvasIntervalLines\").call(d3.axisBottom(this.dataCanvasXscaleZoom).tickValues(pdata).tickSize(100).tickPadding(3).tickFormat(() => {\n                    return \"\"\n                })).select(\".domain\").remove();\n\n                d3.selectAll(\"#modeCanvasXaxis\").call(d3.axisBottom(this.dataCanvasXscaleZoom));\n                d3.selectAll(\"#modeCanvasIntervalLines\").call(d3.axisBottom(this.dataCanvasXscaleZoom).tickValues(pdata).tickSize(100).tickPadding(3).tickFormat(() => {\n                    return \"\"\n                })).select(\".domain\").remove();\n\n\n                this.propCanvasYscale =\n                    d3.scaleLinear()\n                        .domain([0, 3])\n                        .range([60.0, 0]);\n\n\n                // Make new line scale functions using latest scale functions.\n                this.lineGenerator = d3.line()\n                    .x((d) => {\n                        return this.dataCanvasXscaleZoom(d[0]);\n                    })\n                    .y((d) => {\n                        return this.dataCanvasYscaleZoom(d[1]);\n                    })\n                    .curve(d3.curveMonotoneX);\n\n                this.lineGenerator2 = d3.line()\n                    .x((d) => {\n                        return this.dataCanvasXscaleZoom(d[0]);\n                    })\n                    .y((d) => {\n                        return this.propCanvasYscale(d[1]);\n                    })\n                    .curve(d3.curveMonotoneX);\n\n\n                d3.selectAll(\".propLines\")\n                    .attr(\"d\", (d) => {\n                        return this.lineGenerator2(d);\n                    });\n\n\n                // update mode variable scale\n                for(let i = 0; i < modeSize; i++){\n                    let lineG = d3.line()\n                        .x((d) => {\n                            return this.dataCanvasXscaleZoom(d[0]);\n                        })\n                        .y((d) => {\n                            return subYscale[i](d[1]);\n                        }).curve(d3.curveMonotoneX);\n\n                    d3.selectAll(\"#modeLines\"+i)\n                        .attr(\"d\", (d)=>{\n                            return lineG(d);\n                        })\n                }\n\n                // Update lines positions.\n                // Update position first and then rendering it\n                this.lineGraph.selectAll(\".lines\")\n                    .each((d) => {\n                        d.newX = this.lineGenerator(d.data);\n                    });\n\n                this.lineGraph.selectAll(\".lines\")\n                    .attr(\"d\", (d) => {\n                        return d.newX;\n                    });\n\n            });\n\n        this.tooltip = d3.select(this._tag)\n            .append(\"div\")\n            .attr(\"id\", \"tooltip\")\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"background-color\", \"rgba(0, 0, 0, 0.7)\")\n            .style(\"border\", \"solid\")\n            .style(\"border-width\", \"1px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"padding\", \"10px\");\n\n\n\n        this.drawGraph(l, xdata, vardict);\n\n    }\n\n\n    drawGraph(l, xdata, vardict) {\n\n        let color = d3.scaleOrdinal()\n            .domain(vardict)\n            .range(d3.schemeTableau10);\n\n        let newDataList = [];\n        let nameList = [];\n        for(let [k, v] of l){\n            let elem = {\n                name: k,\n                data: v\n            };\n            newDataList.push(elem);\n            nameList.push(k);\n        }\n        let infoHeight = nameList.length * 30;\n\n\n        this.InfoCanvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"main_svg_info\")\n            .attr(\"width\", this._size.width).attr(\"height\", infoHeight);\n\n        this.InfoCanvas.selectAll(\"dots\")\n            .data(nameList)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", 20)\n            .attr(\"cy\", (d, i) => {return 15 + i * 25})\n            .attr(\"r\", 7)\n            .style(\"fill\", (d)=> { return color(d) });\n\n\n        // Add one dot in the legend for each name.\n        this.InfoCanvas.selectAll(\"labels\")\n            .data(nameList)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", 40)\n            .attr(\"y\", function(d,i){ return 15 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n            .style(\"fill\", function(d){ return color(d)})\n            .text(function(d){ return d})\n            .attr(\"text-anchor\", \"left\")\n            .style(\"alignment-baseline\", \"middle\");\n\n\n\n        let dataCanvasXscale = this.dataCanvasXscale;\n        let dataCanvasYscale = this.dataCanvasYscale;\n        this.lineGenerator = d3.line()\n            .x(function (d) {\n                return dataCanvasXscale(d[0]);\n            })\n            .y(function (d) {\n                return dataCanvasYscale(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        // add line to dataCanvas front where clipping path is added.\n        this.lineGraph = this.graphCanvas\n            .selectAll(\".lines\")\n            .append(\"g\")\n            .data(newDataList)\n            .enter();\n\n        this.lineGraph.append(\"path\")\n            .attr(\"d\", (d) => {\n                return this.lineGenerator(d.data);\n            })\n            .attr(\"class\", \"lines\")\n            .attr(\"stroke\", (d, i) => {\n                return color(d.name);\n            })\n            .attr(\"stroke-width\", 1.5)\n            .style(\"fill\", \"none\");\n\n        this.lineGraph.append(\"text\")\n            .attr('id', 'focusText')\n            .attr(\"transform\", () => {\n                return \"translate(2,\" + (this._margin_viewer.top - 3) + \")\"\n            })\n            .style(\"font-size\", () => {\n                return \"11px\"\n            })\n            .style(\"visibility\", \"hidden\");\n\n\n        let bisectDate = d3.bisector((d) => {\n            return d;\n        }).left;\n\n        let lineGraph = this.lineGraph;\n        this.graphCanvasFront\n            .append(\"rect\")\n            .attr(\"id\", \"mainrect\")\n            .attr('width', this._size.width - this.x_clip_margin)\n            .attr('height', this.data_viewer_height)\n            .attr(\"transform\", \"translate(\" + 0 + \",\" + 1 + \")\")\n            //.attr(\"clip-path\", \"url(#dataCanvasClip)\")\n            .style(\"fill-opacity\", \"0.0\")\n            .on(\"mouseover\", () => {\n                if (this.popup) {\n                    //tooltip.style(\"visibility\", \"visible\");\n                }\n                lineGraph.selectAll(\"#focusCircle\").style(\"visibility\", \"visible\");\n                lineGraph.selectAll(\"#focusText\").style(\"visibility\", \"visible\");\n            })\n            .on(\"mouseout\", function () {\n                //tooltip.style(\"visibility\", \"hidden\");\n                lineGraph.selectAll(\"#focusCircle\").style(\"visibility\", \"hidden\");\n                lineGraph.selectAll(\"#focusText\").style(\"visibility\", \"hidden\");\n            })\n            .on(\"mousemove\", (mouse) => {\n                // Get current mouse position.\n                // let n_mouse = mouse($(\"#graphCanvas\" + this._index)[0]);\n                let pos = this.dataCanvasXscaleZoom.invert(mouse.x);\n\n                let bisectPos = bisectDate(xdata, pos);\n                if (bisectPos > 0 && xdata.length - 1 >= bisectPos) {\n                }\n            })\n            .call(this.zoom);\n    }\n\n}\n\nexport {Renderer};","import * as d3 from 'd3';\nimport \"./MainRenderer.scss\";\n\nclass PropositionRenderer {\n\n\n    constructor(\n        _size,\n        _margin_viewer,\n        _index,\n        _jd = '',\n    ) {\n        this.axis_delta = 50.0;\n        this.x_clip_margin = 50.0;\n\n        // actual data point viewers height.\n        this.data_viewer_height = 60.0;\n\n        this._size = _size;\n        this._margin_viewer = _margin_viewer;\n        this._index = _index;\n        this._tag = \"#proposition\" + this._index;\n        this._jd = _jd;\n\n    }\n\n    clear(){\n        d3.select(this._tag).selectAll(\"#prop_svg\").remove();\n    }\n\n    loadGraph(maxX, data, xrange) {\n        this.dataXrange = maxX;\n        this.xrange = xrange;\n\n        d3.select(this._tag).selectAll(\"#prop_svg\").remove();\n\n        // set main canvas\n        this.canvas = d3.select(this._tag).append(\"svg\").attr(\"id\", \"prop_svg\")\n            .attr(\"width\", this._size.width).attr(\"height\", this._size.height);\n\n        // set canvas front\n        this.propCanvas = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvas\" + this._index)\n            .attr(\"clip-path\", \"url(#propCanvasClip\" + this._index + \")\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 0 + \")\");\n\n        // set data canvas\n        // Add scale error to make lines fit the view box.\n        // TODO: Update formula for error. Divide by 10 is not optimal.\n        let XscaleError = (this.dataXrange[1] - this.dataXrange[0]) / 10;\n\n\n        // Set scale function for x.\n        // Clipping margin does the correction of calculate length of x axis.\n        // X axis is move this.x_clip_margin by below code.\n        this.Xscale = d3.scaleLinear()\n            .domain([this.dataXrange[0], this.dataXrange[1] + XscaleError])\n            .range([0, this._size.width]);\n\n        // set scale function for y\n        // 0: none, 1: false, 2: true, 3:none\n        this.Yscale =\n            d3.scaleLinear()\n                .domain([0, 3])\n                .range([this.data_viewer_height, 0]);\n\n\n\n        this.canvas.append(\"clipPath\")\n            .attr(\"id\", \"propCanvasClip\" + this._index)\n            .append(\"rect\")\n            .attr(\"width\", this._size.width)\n            .attr(\"height\", this.data_viewer_height);\n\n\n\n\n        let scaleX = this.Xscale;\n        let scaleY = this.Yscale;\n\n\n        // Add interval lines.\n        this.propCanvasIntervalLines = this.propCanvas.append(\"g\")\n            .attr(\"id\", \"propCanvasIntervalLines\")\n            //.attr(\"transform\", \"translate(\" + 0 + \",\" + (-50) + \")\");\n\n        // tickValues is actual data line\n        // e.g) if you put [1, 2] in the tickValues than, it will draw line to x:1 and x:2.\n        this.propCanvasIntervalLines.call(d3.axisBottom(scaleX).tickValues(this.xrange).tickSize(this._size.height).tickPadding(3).tickFormat(() => {\n            return \"\"\n        })).select(\".domain\").remove();\n\n\n        // Add x axis for propCanvas.\n        this.propCanvasXaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvasXaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + (this.data_viewer_height + 1) + \")\")\n            .call(d3.axisBottom(scaleX));\n\n        // Add y axis.\n        this.propCanvasYaxis = this.canvas.append(\"g\")\n            .attr(\"id\", \"propCanvasYaxis\")\n            .attr(\"transform\", \"translate(\" + this.x_clip_margin + \",\" + 1 + \")\");\n\n        this.propCanvasYaxis.call(d3.axisLeft(scaleY).ticks(4).tickFormat(\n            (d) => {\n                if (d === 1) {\n                    return \"false\"\n                } else if (d === 2) {\n                    return \"true\"\n                } else {\n                    return \" \"\n                }\n            }));\n\n        // update when redraw, remove previous proposition graph.\n        this.propGraph = this.propCanvas\n            .selectAll(\".propLines\")\n            .append(\"g\")\n            .data(data)\n            .enter();\n\n\n        // set proposition graph line generator\n        this.propLineGenerator = d3.line()\n            .x(function (d) {\n                return scaleX(d[0]);\n            })\n            .y(function (d) {\n                return scaleY(d[1]);\n            }).curve(d3.curveMonotoneX);\n\n        let propLineG = this.propLineGenerator;\n        /**\n         * this is actual data of proposition graph\n         */\n        this.propGraph\n            .append(\"path\")\n            .attr(\"d\", (d) => {\n                return propLineG(d);\n            })\n            .attr(\"class\", \"propLines\")\n            .attr(\"stroke\", \"red\")\n            .attr(\"stroke-width\", 1.5);\n\n    }\n\n}\n\nexport {PropositionRenderer};","/**\n * Basic wrapper class for *visualize* **project**.\n * This class uses MathModel's objects and this class is extremely specific\n * to certain project. Do not reuse this class. This is just wrapper class!\n *\n * Written by Geunyeol Ryu\n * @ 2019.06.22\n */\n\n\n/**\n * Packages.\n */\n\nexport interface Proposition {\n    name: string;\n    actual: string;\n    data: [number, number][][];\n}\n\nexport interface IntervalInfo {\n    intIndex: number;\n    range: number[];\n    data: number[];\n}\n\nexport interface Mode {\n    name: string;\n    type: string;\n    actual: string[];\n    data: [number, number][][];\n    min: number;\n    max: number;\n    originalData: string[];\n}\n\nexport interface Interval {\n    name: string;\n    points: [number, number][][];\n}\n\nexport interface Interval4List {\n    index: number;\n    interval: Interval[];\n}\n\nclass Json {\n    /**\n     * Internally has intervals.\n     */\n\n    // intervals map needs to be different of each graphs.\n    // you will have many different graphs..\n    private _intervalsMap: Map<number, Map<number, Interval[]>> = new Map<number, Map<number, Interval[]>>();\n    private _intervalVarMap: Map<number, string[]> = new Map<number, string[]>();\n    private _dataByNameMap: Map<number, Map<string, [number, number][]>> = new Map<number, Map<string, [number, number][]>>();\n\n    private _xRangeMap: Map<number, [number, number]> = new Map<number, [number, number]>();\n    private _yRangeMap: Map<number, [number, number]> = new Map<number, [number, number]>();\n    private _graph_size: number = 0;\n\n    private maxX: number = 0.0;\n    private minX: number = 0.0;\n    private totalMaxX: number = 0.0;\n    private totalMinX: number = 0.0;\n    private _isEmpty: boolean = true;\n    private _var_list: string[] = [];\n    private _x_data_list: number[] = [];\n\n    private _interval_flat_list: number[] = [];\n    // Array of propositions. [\"x>1\", \"x<0\", ...]\n\n    private _interval_info: Map<number, IntervalInfo> = new Map<number, IntervalInfo>();\n    // i'th graph with auto interval and proposition\n    private _propMap: Map<number, Proposition> = new Map<number, Proposition>();\n    private _modeMap: Map<number, Mode> = new Map<number, Mode>();\n\n\n    xRange(index: number): ([number, number] | undefined) {\n        return this._xRangeMap.get(index);\n    }\n\n    yRange(index: number): ([number, number] | undefined) {\n        return this._yRangeMap.get(index);\n    }\n\n    get variables() {\n        return this._var_list;\n    }\n\n    get xlist() {\n        return this._x_data_list;\n    }\n\n    // graph with number, each number is interval...\n    GetGraph(index: number): (Map<number, Interval[]> | undefined) {\n        return this._intervalsMap.get(index)\n    }\n\n    // graph with number, each number is interval...\n    GetGraph2List(index: number): (Interval4List[]) {\n        const res = [];\n        for (let i = 0; i < this._intervalsMap.size; i++){\n            const intv = this._intervalsMap.get(index);\n            if (intv){\n                const intvElem = intv.get(i);\n                if (intvElem){\n                    const newI = {\n                        index: i,\n                        interval: intvElem,\n                    };\n                    res.push(newI);\n                }\n            }\n        }\n        return res;\n    }\n\n    GetVar(index:number): (string[] | undefined) {\n        return this._intervalVarMap.get(index);\n    }\n\n    GetGraphSize(): number {\n        return this._graph_size;\n    }\n\n    GetIntervalSize(): number {\n        return this._intervalsMap.size;\n    }\n\n    GetIntervalInfo(index: number) {\n        return this._interval_info.get(index);\n    }\n\n    GetDataByName(index: number){\n        return this._dataByNameMap.get(index);\n    }\n\n    GetModeSize() {\n        return this._modeMap.size;\n    }\n\n    GetMode(index: number) {\n        return this._modeMap.get(index);\n    }\n\n\n    GetIntervalInfoFlat() {\n        return this._interval_flat_list;\n    }\n\n    get varMap(){\n        return this._intervalVarMap;\n    }\n\n    get map() {\n        return this._intervalsMap;\n    }\n\n    get modeMap() {\n        return this._modeMap;\n    }\n\n    // Get data list related to intervals from map structure.\n    GetProp(index: number) {\n        return this._propMap.get(index);\n    }\n\n    get propMap() {\n        return this._propMap;\n    }\n\n    get propSize() {\n        return this._propMap.size;\n    }\n\n\n    get MaxX() {\n        return this.maxX;\n    }\n\n    get MinX() {\n        return this.minX;\n    }\n\n    get TotalMaxX() {\n        return this.totalMaxX;\n    }\n\n    get TotalMinX() {\n        return this.totalMinX;\n    }\n\n    IsInList(l:string[], elem:string){\n        for(let e of l){\n            if(e === elem){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    clearAll() {\n        this._intervalsMap.clear();\n        this._intervalVarMap.clear();\n        this._dataByNameMap.clear();\n        this._xRangeMap.clear();\n        this._yRangeMap.clear();\n        this._graph_size = 0;\n\n        this.maxX = 0.0;\n        this.minX = 0.0;\n        this.totalMaxX = 0.0;\n        this.totalMinX = 0.0;\n        this._isEmpty = true;\n        this._var_list = [];\n        this._x_data_list = [];\n\n        this._interval_flat_list = [];\n        // Array of propositions. [\"x>1\", \"x<0\", ...]\n\n        this._interval_info.clear();\n        // i'th graph with auto interval and proposition\n        this._propMap.clear();\n        this._modeMap.clear();\n    }\n\n    /**\n     * @params jsonString Simple string that looks like Json file.\n     */\n    set string(json: string) {\n        this.clearAll();\n        // this.parse(json);\n    }\n\n    isEmpty(): boolean {\n        return this._isEmpty;\n    }\n\n    /**\n     * Parsing interanl jsonString to make object.\n     */\n    parse = (json: any):void => {\n        // clear all element in intervals list.\n        this.clearAll();\n        this._isEmpty = false;\n\n        // need to take both key and value.\n        const [variable, interval, dataByName, prop, mode, xdata, intervalInfo, full_interval_range] = Object.values(json);\n        this._interval_flat_list = Object.values(full_interval_range).map((e) => {\n            return parseFloat(e as string);\n        });\n\n\n\n        // get interval info\n        for (const [, ovalue] of Object.entries(intervalInfo as string)) {\n            const [interval_index, interval_range, interval_data] = Object.values(ovalue as string);\n            const tmp: IntervalInfo = {\n                intIndex: parseInt(interval_index),\n                range: Object.values(interval_range).map((e) => {\n                    return parseFloat(e)\n                }),\n                data: Object.values(interval_data).map((e) => {\n                    return parseFloat(e)\n                }),\n            };\n            this._interval_info.set(parseInt(interval_index), tmp);\n        }\n\n\n        // get mode\n        let counter_mode = 0;\n        for (const [, ovalue] of Object.entries(mode as string)) {\n            const [mode_name, mode_type, mode_data] = Object.values(ovalue as string);\n            const data = Object.values(mode_data as string);\n\n            const intv_data_set: [number, number][][] = [];\n            let min = 0.0;\n            let max = 0.0;\n            for (let ii2 = 0; ii2 < this._interval_info.size; ii2++) {\n                let numnumlist: [number, number][] = [];\n                const iifg = this._interval_info.get(ii2);\n                if (iifg) {\n                    // Todo: not right....\n                    if (mode_type === \"bool\"){\n                        max = 3;\n                        numnumlist = iifg.data.map((e) => {\n                            return data[ii2] === \"True\" ? [e, 2] : [e, 1];\n                        });\n                    } else if (mode_type === \"int\") {\n                        numnumlist = iifg.data.map((e) => {\n                            const yy = parseInt(data[ii2]);\n                            if (yy < min){\n                                min = yy;\n                            }\n                            if (yy > max){\n                                max = yy;\n                            }\n                            return [e, yy];\n                        });\n                    } else if (mode_type === \"real\") {\n                        numnumlist = iifg.data.map((e) => {\n                            const yy = parseFloat(data[ii2]);\n                            if (yy < min){\n                                min = yy;\n                            }\n                            if (yy > max){\n                                max = yy;\n                            }\n                            return [e, yy];\n                        });\n                    }\n                    // Todo update it.\n                }\n                intv_data_set.push(numnumlist);\n            }\n\n            const tmp_mode: Mode = {\n                name: mode_name,\n                type: mode_type,\n                actual: data,\n                data: intv_data_set,\n                min: min,\n                max: max,\n                originalData: data,\n            };\n            this._modeMap.set(counter_mode, tmp_mode);\n            counter_mode++;\n        }\n\n        // get proposition\n        let counter = 0;\n        for (const [, ovalue] of Object.entries(prop)) {\n            const [prop_name, prop_actual, prop_data] = Object.values(ovalue as string);\n            const data = Object.values(prop_data);\n\n            const intv_data_set: [number, number][][] = [];\n            for (let ii2 = 0; ii2 < this._interval_info.size; ii2++) {\n                let numnumlist: [number, number][] = [];\n                const iifg = this._interval_info.get(ii2);\n                if (iifg) {\n                    numnumlist = iifg.data.map((e) => {\n                        return data[ii2] == \"True\" ? [e, 2] : [e, 1];\n                    });\n                }\n                intv_data_set.push(numnumlist);\n            }\n            const tmp_prop: Proposition = {\n                name: prop_name,\n                actual: prop_actual,\n                data: intv_data_set,\n            };\n            this._propMap.set(counter, tmp_prop);\n            counter++;\n        }\n\n        this._var_list = Object.values(variable);\n        this._x_data_list = Object.values(xdata).map((s) => {\n            return parseFloat(s as string)\n        });\n        this._graph_size = interval.length;\n\n\n        // iterate through multiple sets of graphs.\n        for (let i = 0; i < interval.length; i++) {\n            const [index, graph, range] = Object.values(interval[i]);\n\n\n            const tmp = new Map<number, Interval[]>();\n            const varList: string[] = [];\n            for (const [, v] of Object.entries(graph)) {\n                const [name, intIndex, points] = Object.values(v as string);\n                const intIndexInt = parseInt(intIndex);\n                const intervals: Interval = {\n                    name: \"\",\n                    points: []\n                };\n\n                const tmp_interval: [number, number][] = [];\n                if (!this.IsInList(varList, name)){\n                    varList.push(name);\n                }\n\n                for (const pv of points) {\n                    const [x, y] = Object.values(pv);\n                    tmp_interval.push([parseFloat(x), parseFloat(y)]);\n                }\n                intervals.name = name;\n                intervals.points.push(tmp_interval);\n\n                // check if is in list\n                const getFromGraph = tmp.get(intIndexInt);\n\n                // if exists\n                if(getFromGraph){\n                    getFromGraph.push(intervals);\n                    tmp.set(intIndexInt, getFromGraph);\n                } else {\n                    const elem = [];\n                    elem.push(intervals);\n                    tmp.set(intIndexInt, elem);\n                }\n\n            }\n\n            this._intervalVarMap.set(parseInt(index), varList);\n            this._intervalsMap.set(parseInt(index), tmp);\n\n\n            const [maxX, minX, maxY, minY, , , ,] = Object.values(range);\n\n            this.maxX = parseFloat(maxX);\n            this.minX = parseFloat(minX);\n\n            this._xRangeMap.set(parseInt(index), [parseFloat(minX), parseFloat(maxX)]);\n            this._yRangeMap.set(parseInt(index), [parseFloat(minY), parseFloat(maxY)]);\n\n            //this._intervalsMap.set(parseInt(index), intervals);\n            if (i == 0) {\n                this.totalMinX = parseFloat(minX);\n                this.totalMaxX = parseFloat(maxX);\n            }\n        }\n\n        // get data by variable name\n        for (let i = 0; i < dataByName.length; i++) {\n            const [index, graph] = Object.values(dataByName[i]);\n            const intIndex = parseInt(index);\n\n\n            const tmp = new Map<string, [number, number][]>();\n            for (const [, v] of Object.entries(graph)) {\n                const [name, points] = Object.values(v as string);\n                const tmp_data:[number, number][] = [];\n\n                for (const pv of points) {\n                    const [x, y] = Object.values(pv);\n                    tmp_data.push([parseFloat(x), parseFloat(y)]);\n                }\n                tmp.set(name, tmp_data)\n            }\n\n            this._dataByNameMap.set(intIndex, tmp);\n\n        }\n    }\n}\n\nexport {Json};\n\n","import React from 'react';\nimport styleVariable from './style/variable.module.scss';\nimport './style/LinePlotStyle.scss';\nimport '../../Style/scss/main.scss';\nimport {margin, PropData, size} from '../Core/Util/Util';\nimport {ModeRenderer} from '../Core/Renderer/ModeRenderer';\nimport {Renderer} from '../Core/Renderer/MainRenderer';\nimport {PropositionRenderer} from '../Core/Renderer/PropositionRenderer';\nimport {Json, Mode, Proposition} from '../Core/Util/DataParserRaw';\nimport {Form} from 'react-bootstrap';\nimport $ from 'jquery';\nimport {ModeState, PropState} from \"../Core/Data\";\nimport * as model from \"./model.json\";\n\n/*\n * Props and State\n */\ninterface Props {\n    url: string;\n}\n\n\ninterface WorkspaceData {\n    title: string;\n    uid: number;\n}\n\ninterface ServerError {\n    message: string;\n    error: boolean;\n}\n\n\n// State contains many useful\ninterface State {\n    model: WorkspaceData[];\n    isOptionAlive: boolean;\n    selectedValue: string;\n    propState: PropState;\n    modeState: ModeState;\n\n    isCounterExm: boolean;\n\n    graphNum: number;\n\n    xlist: number[];\n    toggle: Map<number, boolean>;\n\n    isToggleChanged: boolean;\n\n    serverError: ServerError;\n    isShutDown: boolean;\n    isLoadingReset: boolean;\n}\n\n/*\n * LinePlot Component\n * no longer need constructors\n * https://medium.com/@martin_hotell/react-typescript-and-defaultprops-dilemma-ca7f81c661c7\n */\nclass StandAloneLinePlot extends React.Component<Props, State> {\n\n    private width: number = parseFloat(styleVariable.width.replace(\"px\", \"\"));\n    private height: number = parseFloat(styleVariable.height.replace(\"px\", \"\"));\n\n    private margin_viewer_top: number = parseFloat(styleVariable.margin_viewer_top.replace(\"px\", \"\"));\n    private margin_viewer_right: number = parseFloat(styleVariable.margin_viewer_right.replace(\"px\", \"\"));\n    private margin_viewer_bottom: number = parseFloat(styleVariable.margin_viewer_bottom.replace(\"px\", \"\"));\n    private margin_viewer_left: number = parseFloat(styleVariable.margin_viewer_left.replace(\"px\", \"\"));\n\n\n    private renderers: Renderer[] = [];\n    private propRenderers: PropositionRenderer[] = [];\n    private modeRenderers: ModeRenderer[] = [];\n\n    private njson = new Json();\n\n    private base_margin = new margin(\n        this.margin_viewer_top,\n        this.margin_viewer_right,\n        this.margin_viewer_bottom,\n        this.margin_viewer_left\n    );\n\n\n    state: State = {\n        isCounterExm: false,\n        selectedValue: \"\",\n        isOptionAlive: false,\n        graphNum: 0,\n        model: [],\n\n\n        propState: {\n            isEnabled: new Map<number, boolean>(),\n            numOfGraph: 0,\n            propRenderers: [],\n            propMap: new Map<number, Proposition>(),\n            propData: new PropData(),\n        },\n\n        modeState: {\n            isEnabled: new Map<number, boolean>(),\n            numOfGraph: 0,\n            modeMap: new Map<number, Mode>(),\n        },\n\n        toggle: new Map<number, boolean>(),\n        isToggleChanged: false,\n        xlist: [],\n        serverError: {\n            message: \"\",\n            error: false,\n        },\n        isShutDown: false,\n        isLoadingReset: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        // private function for loading model\n        this.load_model = this.load_model.bind(this);\n        this.parse_model = this.parse_model.bind(this);\n\n        // Set config defaults when creating the instance\n        this.Item = this.Item.bind(this);\n        this.ItemList = this.ItemList.bind(this);\n        this.Main = this.Main.bind(this);\n    }\n\n\n    load_model() : void {\n        // if no data is coming from server ...\n        this.njson.parse((model as any).default);\n        const gs = this.njson.GetGraphSize();\n        this.renderers = [];\n        const isRedBool = new Map<number, boolean>();\n\n        let width = $(window).width();\n        if (width){\n            width = width * 0.8 - this.base_margin.left - this.base_margin.right;\n        }\n        const newSize = new size(\n            width,\n            80.0\n        );\n\n        for (let e = 0; e < gs; e++) {\n            const red = new Renderer(\n                new size(\n                    width,\n                    this.height\n                ), this.base_margin, e\n            );\n            red.graph = this.njson.GetGraph(e);\n            this.renderers.push(red);\n            isRedBool.set(e, true);\n        }\n\n        const isBoolean = new Map<number, boolean>();\n        this.propRenderers = [];\n        for (let e = 0; e < this.njson.propSize; e++) {\n            const tmp_prop = new PropositionRenderer(\n                newSize, this.base_margin, e\n            );\n            this.propRenderers.push(tmp_prop);\n            isBoolean.set(e, true);\n        }\n\n\n        const modeIsBoolean = new Map<number, boolean>();\n        this.modeRenderers = [];\n        for (let e = 0; e < this.njson.GetModeSize(); e++) {\n            const md = new ModeRenderer(\n                newSize, this.base_margin, e\n            );\n            this.modeRenderers.push(md);\n            modeIsBoolean.set(e, true);\n        }\n\n        // get reloaded new variables.\n        for (let i = 0; i < this.njson.GetGraphSize() + this.njson.propSize; i++) {\n            this.state.toggle.set(i, true);\n        }\n\n        this.setState({\n            selectedValue: \"model.json\",\n            isOptionAlive: true,\n            isCounterExm: true,\n            toggle: isRedBool,\n            graphNum: this.njson.GetGraphSize(),\n            xlist: this.njson.xlist,\n            propState: {\n                numOfGraph: this.njson.propSize,\n                propData: {\n                    range: [this.njson.TotalMinX, this.njson.TotalMaxX],\n                    interval_range: this.njson.GetIntervalInfoFlat(),\n                },\n                propRenderers: this.propRenderers,\n                propMap: this.njson.propMap,\n                isEnabled: isBoolean,\n            },\n            modeState: {\n                numOfGraph: this.njson.GetModeSize(),\n                modeMap: this.njson.modeMap,\n                isEnabled: modeIsBoolean,\n            }\n        });\n    }\n\n\n    parse_model(): void {\n\n        if (!this.njson.isEmpty()) {\n            const modeRenderersXScale = [];\n            const modeRenderersYScale = [];\n            for (let e = 0; e < this.njson.GetModeSize(); e++) {\n                const d = this.njson.GetMode(e);\n                if (d) {\n                    this.modeRenderers[e].loadGraph([this.njson.TotalMinX, this.njson.TotalMaxX], d.data, this.njson.GetIntervalInfoFlat(), d.originalData, d.type, d.min, d.max);\n                    modeRenderersXScale.push(this.modeRenderers[e].getXscale());\n                    modeRenderersYScale.push(this.modeRenderers[e].getYscale());\n                }\n\n            }\n            for (let e = 0; e < this.renderers.length; e++) {\n                const eGraph: (Map<string, [number, number][]> | undefined) = this.njson.GetDataByName(e);\n                if (eGraph) {\n                    // vardict should always exist or undefined error would occur!\n                    this.renderers[e].loadGraph(this.njson.xRange(e), this.njson.yRange(e), eGraph, this.state.xlist, this.njson.GetIntervalInfoFlat(), this.njson.variables, this.njson.GetModeSize(), modeRenderersXScale, modeRenderersYScale);\n                }\n            }\n\n\n            for (let e = 0; e < this.njson.propSize; e++) {\n                const d = this.njson.GetProp(e);\n                if (d) {\n                    this.propRenderers[e].loadGraph([this.njson.TotalMinX, this.njson.TotalMaxX], d.data, this.njson.GetIntervalInfoFlat());\n                }\n\n            }\n        } else {\n            for (let e = 0; e < this.renderers.length; e++) {\n                this.renderers[e].clear();\n            }\n            this.renderers = [];\n\n\n            for (let e = 0; e < this.propRenderers.length; e++) {\n                this.propRenderers[e].clear();\n            }\n            this.propRenderers = [];\n\n            for (let e = 0; e < this.modeRenderers.length; e++) {\n                this.modeRenderers[e].clear();\n            }\n            this.modeRenderers = [];\n        }\n    }\n\n    componentDidMount() {\n        // set default file as model.json\n        // in order to read it easily we need to use\n        // *.json instead of *.cep\n        this.setState({model: [{title: \"./model.json\", uid: 1}]});\n        this.load_model();\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        this.parse_model();\n    }\n\n\n    Item(index: number, margin: number|undefined, key_index: number) {\n        const vars = this.njson.GetVar(index);\n        const isEnabled = this.state.toggle.get(index);\n        let label = \"unknown\";\n        if(vars){\n            label = \"Var: \";\n            for (let i = 0; i < vars.length; i++){\n                if (i === 0)\n                    label += vars[i];\n                else\n                    label += (\", \"+vars[i]);\n            }\n        }\n\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}} key={key_index}>\n            <Form.Row>\n                <Form.Check\n                    label={label}\n                    onChange={() => {return true;}}\n                    checked={isEnabled}\n                    onClick={() => {\n                        const newIsEnabled = this.state.toggle;\n                        if (isEnabled) {\n                            newIsEnabled.set(index, false)\n                            this.setState({\n                                toggle: newIsEnabled,\n                            });\n\n                        } else {\n                            newIsEnabled.set(index, true)\n                            this.setState({\n                                toggle: newIsEnabled,\n                            });\n                        }\n                    }\n                    }\n                />\n                <Form.Row>\n                    <div id={\"graph\" + index} style={{display: this.state.toggle.get(index) ? 'block' : 'none'}}>\n                        <span/>\n                    </div>\n                </Form.Row>\n            </Form.Row>\n            </div>\n        )\n    }\n\n    PropUI(index: number, margin: number|undefined, key_index: number) {\n        const prop = this.state.propState.propMap.get(index);\n        const isEnabled = this.state.propState.isEnabled.get(index);\n        let label = \"unknown\";\n        if (prop) {\n            label = prop.name + \" : \" + prop.actual;\n        }\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}} key={key_index}>\n            <Form.Row>\n                <Form.Check\n                    label={label}\n                    checked={isEnabled}\n                    onChange={() => {return true;}}\n                    onClick={() => {\n                        const newIsEnabled = this.state.propState.isEnabled;\n                        if (isEnabled) {\n                            newIsEnabled.set(index, false);\n                            this.setState({\n                                    propState: {\n                                        numOfGraph: this.state.propState.numOfGraph,\n                                        propMap: this.state.propState.propMap,\n                                        isEnabled: this.state.propState.isEnabled,\n                                        propData: this.state.propState.propData,\n                                        propRenderers: this.state.propState.propRenderers,\n                                    }\n                                }\n                            );\n                        } else {\n                            newIsEnabled.set(index, true);\n                            this.setState({\n                                propState: {\n                                    numOfGraph: this.state.propState.numOfGraph,\n                                    propMap: this.state.propState.propMap,\n                                    isEnabled: this.state.propState.isEnabled,\n                                    propData: this.state.propState.propData,\n                                    propRenderers: this.state.propState.propRenderers,\n                                }\n                            });\n                        }\n                    }\n                    }\n                />\n                <Form.Row>\n                    <div className=\"svg_div\" id={\"proposition\" + index}\n                         style={{display: this.state.propState.isEnabled.get(index) ? 'block' : 'none'}}>\n                        <span/>\n                    </div>\n                </Form.Row>\n            </Form.Row>\n            </div>\n        )\n    }\n\n    ModeUI(index: number, margin: number|undefined, key_index: number) {\n\n        let label = \"unknown\";\n        const mod = this.state.modeState.modeMap.get(index);\n        if (mod) {\n            label = mod.name + \" = \" + mod.actual\n        }\n        const isBool = this.state.modeState.isEnabled.get(index);\n\n        return (\n            <div style={{marginLeft: margin, marginRight: margin}} key={key_index}>\n            <Form.Row>\n                <Form.Check\n                    label={label}\n                    checked={ isBool }\n                    onChange={() => {return true;}}\n                    onClick={() => {\n                        const newIs = this.state.modeState.isEnabled;\n                        if (isBool) {\n                            newIs.set(index, false);\n                            this.setState({\n                                modeState: {\n                                    isEnabled: newIs,\n                                    modeMap: this.state.modeState.modeMap,\n                                    numOfGraph: this.state.modeState.numOfGraph,\n                                }\n                            });\n\n                        } else {\n                            newIs.set(index, true);\n                            this.setState({\n                                modeState: {\n                                    isEnabled: newIs,\n                                    modeMap: this.state.modeState.modeMap,\n                                    numOfGraph: this.state.modeState.numOfGraph,\n                                }\n                            });\n                        }\n                    }\n                    }\n                />\n                <Form.Row>\n                    <div className=\"svg_div\" id={\"mode\" + index}\n                         style={{display: this.state.modeState.isEnabled.get(index) ? 'block' : 'none'}}>\n                        <span/>\n                    </div>\n                </Form.Row>\n            </Form.Row>\n            </div>\n        )\n    }\n\n    ItemList() {\n        let count = 0;\n        const res = [];\n        const res2 = [];\n        const res3 = [];\n        let margin = $(window).width();\n        if (margin){\n            margin = margin * 0.1 + this.base_margin.left;\n        }\n\n        for (let i = 0; i < this.state.graphNum; i++) {\n            res.push(this.Item(i, margin, count));\n            count++;\n        }\n        for (let i = 0; i < this.njson.propSize; i++) {\n            res2.push(this.PropUI(i, margin, count));\n            count++;\n        }\n\n        for (let i = 0; i < this.njson.GetModeSize(); i++) {\n            res3.push(this.ModeUI(i, margin, count));\n            count++;\n        }\n        return (\n            <Form>\n                {res3}\n                {res}\n                {res2}\n            </Form>\n        )\n\n    }\n\n    Main() {\n        return (\n            <div>\n                {!this.njson.isEmpty() ? (\n                    <div>\n                        <div className=\"row basic_box\">\n                            <div className=\"col-md-12\">\n                                <this.ItemList/>\n                            </div>\n                        </div>\n                    </div>) : (\n                    <div className=\"row line_plot_div\">\n                        <div className=\"col-md-1\"/>\n                        <div className=\"col-md-10 alert alert-warning\" role=\"alert\">\n                            No counter example, nothing to show!\n                        </div>\n                        <div className=\"col-md-1\"/>\n                    </div>\n                )}\n            </div>\n        )\n    }\n\n\n    render() {\n        // TODO: Update precision of graph after update.\n        return (\n            <div>\n                <this.Main/>\n            </div>);\n    }\n}\n\nexport default StandAloneLinePlot;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './Style/scss/main.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport StandAloneLinePlot from './Component/LinePlot/StandAloneLinePlot';\n\nfunction App() {\n  // \"http://localhost:3000\"\n  //\n  //let option = require('./.option.json');\n  // console.log(option.url);\n  return (\n      <div className=\"main-container\"><StandAloneLinePlot url={\"http://localhost:3000\"}/></div>\n  );\n\n  // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //       <p>\n  //         Edit <code>src/App.tsx</code> and save to reload.\n  //       </p>\n  //       <a\n  //         className=\"App-link\"\n  //         href=\"https://reactjs.org\"\n  //         target=\"_blank\"\n  //         rel=\"noopener noreferrer\"\n  //       >\n  //         Learn React\n  //       </a>\n  //     </header>\n  //   </div>\n  // );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}